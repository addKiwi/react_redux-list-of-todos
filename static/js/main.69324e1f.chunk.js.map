{"version":3,"sources":["store/types.ts","store/actions.tsx","store/selectors.tsx","api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","store/store.tsx","index.tsx"],"names":["ActionsType","addTodos","payload","type","AddTodos","ACTIONS","SetSelectedUserId","AddUser","DeleteTodo","getTodosSelector","state","todos","getSelectedUserId","selectedUserId","getUserSelector","user","API_URL","request","query","method","fetch","then","response","json","TodoList","React","memo","deleteTodo","setSelectedUserId","useState","setQuery","selectedOption","setSelectedOption","useSelector","dispatch","useDispatch","filteredTodos","useMemo","filter","todo","title","toLowerCase","includes","completed","removeTodo","todoId","deleteTodoById","className","value","onChange","event","target","map","cn","checked","readOnly","userId","onClick","id","CurrentUser","addUser","selectedUser","useEffect","data","name","email","phone","App","initialState","store","createStore","action","composeWithDevTools","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.69324e1f.chunk.js","sourcesContent":["import { Action as BaseAction } from 'redux';\n\nexport interface State {\n  todos: Todo[],\n  selectedUserId: number,\n  user: User | null,\n}\n\nexport interface Action<T, P> extends BaseAction<T> {\n  payload: P,\n}\n\nexport enum ActionsType {\n  AddTodos = 'AddTodos',\n  AddUser = 'AddUser',\n  SetSelectedUserId = 'SetSelectedUserId',\n  DeleteTodo = 'DeleteTodo',\n}\n\nexport type AddTodosAction = Action<ActionsType.AddTodos, Todo[]>;\nexport type AddUserAction = Action<ActionsType.AddUser, User>;\nexport type SetSelectedUserIdAction =\nAction<ActionsType.SetSelectedUserId, number>;\nexport type DeleteTodoAction = Action<ActionsType.DeleteTodo, number>;\n\nexport type Actions = (\n  AddTodosAction\n  | AddUserAction\n  | SetSelectedUserIdAction\n  | DeleteTodoAction\n);\n","import {\n  ActionsType,\n  AddTodosAction,\n  AddUserAction,\n  DeleteTodoAction,\n  SetSelectedUserIdAction,\n} from './types';\n\nexport const addTodos = (payload: Todo[]): AddTodosAction => ({\n  type: ActionsType.AddTodos,\n  payload,\n});\n\nexport const setSelectedUserId = (\n  payload: number,\n): SetSelectedUserIdAction => ({\n  type: ActionsType.SetSelectedUserId,\n  payload,\n});\n\nexport const addUser = (payload: User): AddUserAction => ({\n  type: ActionsType.AddUser,\n  payload,\n});\n\nexport const deleteTodo = (payload: number): DeleteTodoAction => ({\n  type: ActionsType.DeleteTodo,\n  payload,\n});\n\nexport const ACTIONS = {\n  addTodos,\n  setSelectedUserId,\n  addUser,\n  deleteTodo,\n};\n","import { State } from './types';\n\nexport const getTodosSelector = (state: State): Todo[] => state.todos;\n\nexport const getSelectedUserId = (state: State): number => state.selectedUserId;\n\nexport const getUserSelector = (state: State): User | null => state.user;\n","export const API_URL = 'https://mate.academy/students-api';\n\nexport function request(query: string, method = {}) {\n  return fetch(`${API_URL}${query}`, method)\n    .then(response => response.json());\n}\n\nexport const getTodos = (): Promise<Todo[]> => request('/todos');\n\nexport const getUserById = (userId: number): Promise<User> => request(`/users/${userId}`);\n\nexport const deleteTodoById = (todoId: number): Promise<number> => request(`todos/${todoId}`, { method: 'DELETE' });\n","import React, { useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './TodoList.scss';\nimport cn from 'classnames';\nimport { ACTIONS } from '../../store/actions';\nimport { getSelectedUserId } from '../../store/selectors';\nimport { deleteTodoById } from '../../api';\n\ninterface Props {\n  todos: Todo[],\n}\n\nexport const TodoList: React.FC<Props> = React.memo(({\n  todos,\n}) => {\n  const { deleteTodo, setSelectedUserId } = ACTIONS;\n\n  const [query, setQuery] = useState('');\n  const [selectedOption, setSelectedOption] = useState('all');\n\n  const selectedUserId = useSelector(getSelectedUserId);\n  const dispatch = useDispatch();\n\n  const filteredTodos = useMemo(() => (\n    todos\n      .filter(todo => (\n        todo.title.toLowerCase().includes(query.toLowerCase())\n      ))\n      .filter(todo => {\n        switch (selectedOption) {\n          case 'active':\n            return todo.completed === false;\n\n          case 'completed':\n            return todo.completed === true;\n\n          default:\n            return todo;\n        }\n      })\n  ), [query, todos, selectedOption]);\n\n  const selectUserId = (id: number) => dispatch(setSelectedUserId(id));\n\n  const removeTodo = (todoId: number) => {\n    deleteTodoById(todoId).then(() => dispatch(deleteTodo(todoId)));\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <div className=\"filter\">\n        <input\n          type=\"text\"\n          className=\"filter__input\"\n          value={query}\n          onChange={(event) => setQuery(event.target.value)}\n        />\n        <select\n          className=\"filter__input\"\n          value={selectedOption}\n          onChange={event => setSelectedOption(event.target.value)}\n        >\n          <option value=\"all\">\n            all\n          </option>\n          <option value=\"active\">\n            active\n          </option>\n          <option value=\"completed\">\n            completed\n          </option>\n        </select>\n      </div>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {filteredTodos.map(todo => (\n\n            <li\n              key={todo.id}\n              className={cn(\n                'TodoList__item',\n                { 'TodoList__item--unchecked': !todo.completed },\n                { 'TodoList__item--checked': todo.completed },\n              )}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={todo.completed}\n                  readOnly\n                />\n                <p>\n                  {todo.title}\n                </p>\n              </label>\n              <div>\n                <button\n                  className={cn(\n                    {\n                      'TodoList__user-button--selected':\n                   todo.userId === selectedUserId,\n                    },\n                    'button',\n                    'TodoList__user-button',\n                  )}\n                  type=\"button\"\n                  onClick={() => selectUserId(todo.userId)}\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n                <button\n                  className={cn(\n                    'button',\n                    'TodoList__user-button',\n                  )}\n                  type=\"button\"\n                  onClick={() => removeTodo(todo.userId)}\n                >\n                  Delete&nbsp;#\n                  {todo.userId}\n                </button>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n});\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUserById } from '../../api';\nimport { ACTIONS } from '../../store/actions';\nimport { getSelectedUserId, getUserSelector } from '../../store/selectors';\nimport './CurrentUser.scss';\nimport './loader.css';\n\nexport const CurrentUser: React.FC = () => {\n  const { addUser, setSelectedUserId } = ACTIONS;\n\n  const selectedUser = useSelector(getUserSelector);\n  const selectedUserId = useSelector(getSelectedUserId);\n  const dispatch = useDispatch();\n\n  const clearUser = () => dispatch(setSelectedUserId(0));\n\n  useEffect(() => {\n    getUserById(selectedUserId)\n      .then(data => dispatch(addUser(data)));\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      {\n        selectedUser ? (\n          <>\n            <h2 className=\"CurrentUser__title\">\n              <span>\n                Selected user:&nbsp;\n                {selectedUser?.id}\n              </span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">{selectedUser?.name}</h3>\n            <p className=\"CurrentUser__email\">{selectedUser?.email}</p>\n            <p className=\"CurrentUser__phone\">{selectedUser?.phone}</p>\n\n            <button\n              className=\"CurrentUser__clear TodoList__user-button--selected\n              button\"\n              type=\"button\"\n              onClick={clearUser}\n            >\n              Clear\n            </button>\n          </>\n        )\n          : (\n            <div className=\"lds-ripple\">\n              <div />\n              <div />\n            </div>\n          )\n      }\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\nimport { getSelectedUserId, getTodosSelector } from './store/selectors';\nimport { addTodos } from './store/actions';\n\nconst App: React.FC = () => {\n  const todos = useSelector(getTodosSelector);\n  const selectedUserId = useSelector(getSelectedUserId);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    getTodos()\n      .then(data => dispatch(addTodos(data)));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { createStore, Reducer, Store } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { Actions, ActionsType, State } from './types';\n\nconst initialState: State = {\n  todos: [],\n  selectedUserId: 0,\n  user: null,\n};\n\nconst reducer: Reducer<State, Actions> = (\n  state = initialState,\n  action,\n): State => {\n  switch (action.type) {\n    case ActionsType.AddTodos:\n      return {\n        ...state,\n        todos: [...state.todos, ...action.payload],\n      };\n\n    case ActionsType.SetSelectedUserId:\n      return {\n        ...state,\n        selectedUserId: action.payload,\n      };\n\n    case ActionsType.AddUser:\n      return {\n        ...state,\n        user: action.payload,\n      };\n\n    case ActionsType.DeleteTodo:\n      return {\n        ...state,\n        todos: state.todos.filter(todo => todo.id !== action.payload),\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const store: Store<State, Actions> = createStore(\n  reducer,\n  composeWithDevTools(),\n);\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { store } from './store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}